rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /products/{productId}{
      allow read: if true //Allow everyone
      allow create: if isAdmin(); 
      allow update: if isAdmin(); 
      allow delete: if isAdmin(); 
    }

    match /orders/{orderId}{
      allow read: if isSignedIn(); //to change all in this collection
      allow create: if isSignedIn();
      allow update: if isSignedIn(); //from the server with admin previlages
      allow delete: if isSignedIn();
    }
    
    match /users/{userId}{
      allow read: if isAdmin() || isOwner(resource.data); 
      allow create: if isOwner(request.resource.data);
      allow update: if isOwner(request.resource.data) 
                    && isOwner(resource.data) 
                    && allowedFields(["age","cart", "email", "lastName", "name"]);
      allow delete: if isOwner(resource.data); 
    }

    match /blog/{postId}{
      allow read: if true; //Allow everyone
      allow create: if isAdmin(); 
      allow update: if isAdmin() || (isSignedIn() && allowedFields(["likes","comments"]));  
      allow delete: if isAdmin(); 
    }

  // FUNCTIONS
    // Check if user has admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "0efdb2ea-fc6f-4787-ab53-a0077c035d1c"
    }
    // Check if user is owner of the doc
    function isOwner(data) {
      return request.auth.uid == data.id;
    }
    // Check if user is signed in
    function isSignedIn() {
        return request.auth != null;
      }
      // Allow only certain fields to be changed
    function allowedFields(fields) {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
      }
  }
}

// firebase deploy --only firestore:rules